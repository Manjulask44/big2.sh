Kubernetes Installation
	Minimum system requirement for master nod is 2-core cpu and 4GB RAM
	
	1. sudo apt update 
	2. sudo apt-get install -y apt-transport-https
	3. sudo su -
	4. curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add
	5. echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
	6. sudo apt update 
	7. sudo apt-get install -y docker.io
	8. sudo systemctl start docker
	9. sudo systemctl enable docker.service
	   sudo apt-get install -y kubelet kubeadm kubectl kubernetes-cni
	
	10. Create a ami from above instance to create workernodes 
	
	11. After ami is available, login again to master node 
		(Make sure docker is running)
		12. sudo su -
		13. kubeadm init
			ERROR1: if we get kubelet isn't running or healthy
						kubelet doesnt got access to docker engine which means 
						we need to configure cgroup of docker 
					create a file /etc/docker/daemon.json with below content
						{
							"exec-opts": ["native.cgroupdriver=systemd"]
						}
					Reload docker daemon
						systemctl daemon-reload
						systemctl restart docker
						systemctl restart kubelet
					
			Run kubeadm init again	
			
			ERROR2: if we get fileavailable error just delete those files 
			ERROR3: if kubelet is running kill it 
						lsof -i :<kublet_port>
						kill -9 <process_id>
			
			Run kubeadm init again	
				if we get kubeadm join command at the end means master node 
				setup is successful and save the join command.

		14. configure K8S kubectl 		
			- exit from the root 
			- copy the default k8s conf file to our home directory 
					mkdir -p $HOME/.kube
					sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
					sudo chown $(id -u):$(id -g) $HOME/.kube/config
		
		15. We install k8s CNI Driver
			sudo sysctl net.bridge.bridge-nf-call-iptables=1
			kubectl apply -f "https://cloud.weave.works/k8s/v1.13/net.yaml"
			
			check for node status - kubectl get nodes
		
		16.	Login to worker node 
			sudo su -
			create a file /etc/docker/daemon.json with below content
				{
					"exec-opts": ["native.cgroupdriver=systemd"]
				}
			Reload docker daemon
				systemctl daemon-reload
				systemctl restart docker
				systemctl restart kubelet		
				
			Now open ports of master nodes 
			
			Run the join command with token which we got from master node 
			
			Repeat the same steps in other worker nodes
kubernetes Architecture 	
	The architecture of k8s differs from master and worker node 

	Master node components 
		1. Api Server / kube-api-server
			- It is the main managemnet point of the cluster and also called 
			  as brain of the cluster.
			- All the components are directly connected to API serve, they 
			  communicate through API server only and no other component will 
			  communicate directly with eachother.
			- This is the only component which connects and got access to etcd.
			- All the cluster requests are authenticated and authorized by API server.
			- API server has a watch machanism for watching the changes in cluster.
			
		2. etcd 
			- ectd is a distributed , consistent key value store used for 
			  storing the complete cluster information/data.
			- ectd contains data such as configuration managemnet of cluster,
              distributed work and basically complete cluster information.			
			
		3. scheduler / kube-scheduler
			- The scheduler always watches for a new pod request and 
			  decides which worker node this pod should be created.
			- Based on the worker node load, affinity and anti-affiny, taint configuration 
			  pod will be scheduled to a particualr node.
			  
		controller manager 
		Cloud controller manager 
		
Worker node components 
		kubelet 
			- It is an agent that runs on each and every worker node and it alsways watches the API 
			  server for pod related changes running in its worker node.
			- kubelet always make sure that the assigend pods to its worker node is running.
			- kubelet is the one which communicates with containarisation tool (docker daemon)
              through docker API (CRI). 	
			- work of kubelet is to create and run the pods. Always reports the status of the worker node 
			  and each pod to API server. (uses a tool call cAdvisor)
			- Kubelet is the one which runs probes.	
		
		kube service proxy 
			(in k8s service means networking)
			- Service proxy runs on each and every worker node and is responsble for watching API 
			  server for any changes in service configuration (any network related configuration).	
			- Based on the configuration service proxy manages the entire network of worker node.

		Container runtime interface (CRI)
			- This component initialy identifies the container technology and connects it to kubelet.
			
			
		pod
			- pods are the smallest deployable object in kuberntes.
			- pod should contain atleast one container and can have n number of containers.
			- If pod contains more than one container all the container share the same memory assigned to that pod.
			
			
YAML file 
	- Filetype .yaml / .yml 
	- YAML file will contain key value pairs where key is fixed and defined by the tool and value is 
	  user defined configuration. 
    - values supports multiple datatypes - string, Integer, Boolean, Array, List and dictionary.

	example:
		1)	name: Harsha
			hobbies: ["Driving","coding"]
			
				(or)
				
			name: harsha
			hobbies: 
				- Driving
				- coding
			
		2)  candidates: 
			   - name: a
			      firstname:
			      lastname: 	
			     age: 25
			   - name: b
			     age: 29
				 
example pod
	apiVersion: v1
		- This is used to specify the version of API t create a particular k8s object.
		- The field is casesentive, it will be in camelcase 
		- The types of API we have in k8s are alpha, beta and stable versions.
		
	kind: Pod 
		- used to specify the type of k8s object to create.
		- Always object name first letter is capital.
		
	metadata: 
		contains the information that helps us to uniquely identify the object.
		There are 3 types of metadata 
			1. name 
			2. labels 
				- k8s labels us used to identify the object.
				ex: name, evironment, tier, release.
			3. annotations

	spec: 
       - actual configuration of the objects 	
	   
	   
apiVersion: v1
kind: Pod 
metadata: 
    name: my-first-pod	
spec: 
    containers:
       - name: my-nginx 
         image: nginx:latest
		 ports: 
		    - containerPort: 80
	
TO create / apply a configuration 
	kubectl apply -f <file>.yml	
	
To list objects 
	kubectl get <obeject_type>
		ex: List pods - kubectl get pods 
		    List deployment - kubectl get deployments
			
To delete objects 
	kubectl delete <object_type>
